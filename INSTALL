For Mac OS X: (Instructions adapted from http://blog.argasinski.eu/2011/09/25/split-mp3-cue-mac-os-x/)
- brew install wget
- cd /usr/local/Library/Formula
- wget https://raw.github.com/npinto/homebrew/f221036962c41c95d5dd0927b24ab1f02d74204e/Library/Formula/libmp3splt.rb
- wget https://raw.github.com/npinto/homebrew/f221036962c41c95d5dd0927b24ab1f02d74204e/Library/Formula/mp3splt.rb
- brew install mp3splt
- brew update && brew install phantomjs
- sqlite3 comes pre-installed on Leopard and later
- Install postgres locally with:
  brew install postgres libpq-dev
- Start the backend server with:
  - cd backend
  - shotgun

For Ubuntu 10.04 LTS:
- Install node.js:
  - download it
  - tar xvzf node-v0.8.11.tar.gz
  - cd node-v0.8.11
  - ./configure
  - make
  - sudo make install
- npm install -g jasmine-node
- npm install -g grunt
- Install mp3splt:
  - see instructions at http://mp3splt.sourceforge.net/mp3splt_page/debian_downloads.php?version=Natty&ubuntu=true
  - Append the following to /etc/apt/sources.list
    deb http://mp3splt.sourceforge.net/repository natty main
  - sudo apt-get install mp3splt
- Install Ruby:
  - sudo apt-get install ruby1.9 irb1.9
  - cd /usr/bin
  - sudo ln -s ruby1.9 ruby
  - sudo ln -s irb1.9 irb
- Get phantomjs from http://phantomjs.org/download.html and unzip into ~/Documents/phantomjs-1.7.0-linux-i686
- sudo apt-get install libsqlite3-dev sqlite3
- Install libxml2 for Nokogirl for Fog gem:
  sudo apt-get install libxslt-dev libxml2-dev
- Install postgres locally with:
  sudo apt-get install postgresql
- Start the backend server with:
  - cd backend
  - bundle exec shotgun

For both platforms:
- Setup agent forwarding with https://help.github.com/articles/using-ssh-agent-forwarding
  - Change ~/.ssh/config to:
    Host web01.foo.com
    ForwardAgent yes
  - Run ssh-add locally before running cap deploy, because the key has to be
    loaded into the local ssh agent before it can be forwarded to the EC2 box's
    ssh agent.
  - On Mac, run ssh-add -K locally so you won't need to run ssh-add every
    reboot.

AWS setup:
- Create an S3 bucket named song_search_media
- Login to AWS S3 console and upload the following policy for the song_search_media bucket:
  {
    "Version":"2008-10-17",
    "Statement":[
      {
        "Sid":"AllowPublicRead",
        "Effect":"Allow",
        "Principal": { "AWS": "*" },
        "Action":["s3:GetObject"],
        "Resource":["arn:aws:s3:::song_search_media/*"]
      }
    ]
  }
